"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemLambdas = exports.ItemLambdasProps = void 0;
const lambda = require("@aws-cdk/aws-lambda");
const core_1 = require("@aws-cdk/core");
const path = require("path");
const lambdaroles_1 = require("./lambdaroles");
class ItemLambdasProps {
}
exports.ItemLambdasProps = ItemLambdasProps;
class ItemLambdas extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.roles = new lambdaroles_1.ItemLambdaRoles(scope, 'ItemLambdaRoles', {
            itemsTable: props.itemsTable
        });
        this.createLinkTokenLambda = new lambda.Function(this, 'LinkTokenLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.CreateLinkTokenHandler",
            // Code supports local build steps, S3 buckets, and inlining.
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            timeout: core_1.Duration.seconds(300),
            role: this.roles.createLinkTokenLambdaRole
        });
        this.createItemLambda = new lambda.Function(this, 'CreateItemLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.CreateItemHandler",
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            timeout: core_1.Duration.seconds(300),
            role: this.roles.createItemLambdaRole
        });
        this.getItemLambda = new lambda.Function(this, 'GetItemLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.GetItemsHandler",
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            timeout: core_1.Duration.seconds(300),
            role: this.roles.getItemLambdaRole
        });
    }
}
exports.ItemLambdas = ItemLambdas;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbUxhbWJkYXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJJdGVtTGFtYmRhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsd0NBQXFFO0FBQ3JFLDZCQUE2QjtBQUM3QiwrQ0FBOEM7QUFHOUMsTUFBYSxnQkFBZ0I7Q0FFNUI7QUFGRCw0Q0FFQztBQUVELE1BQWEsV0FBWSxTQUFRLGdCQUFTO0lBTXRDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBdUI7UUFDN0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksNkJBQWUsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7WUFDdkQsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFO1lBQ3RFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWU7WUFDdkMsT0FBTyxFQUFFLHdDQUF3QztZQUVqRCw2REFBNkQ7WUFDN0QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDdEUsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDOUIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCO1NBQzdDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ2xFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWU7WUFDdkMsT0FBTyxFQUFFLG1DQUFtQztZQUM1QyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUN0RSxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU8sRUFBRSxlQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0I7U0FDeEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUM1RCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlO1lBQ3ZDLE9BQU8sRUFBRSxpQ0FBaUM7WUFDMUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDdEUsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDOUIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQTFDRCxrQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcIkBhd3MtY2RrL2F3cy1sYW1iZGFcIjtcbmltcG9ydCB7Q29uc3RydWN0LCBEdXJhdGlvbiwgU3RhY2ssIFN0YWNrUHJvcHN9IGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQge0l0ZW1MYW1iZGFSb2xlc30gZnJvbSBcIi4vbGFtYmRhcm9sZXNcIjtcbmltcG9ydCB7VGFibGV9IGZyb20gXCJAYXdzLWNkay9hd3MtZHluYW1vZGJcIjtcblxuZXhwb3J0IGNsYXNzIEl0ZW1MYW1iZGFzUHJvcHMge1xuICAgIGl0ZW1zVGFibGU6IFRhYmxlXG59XG5cbmV4cG9ydCBjbGFzcyBJdGVtTGFtYmRhcyBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IGNyZWF0ZUxpbmtUb2tlbkxhbWJkYTogbGFtYmRhLkZ1bmN0aW9uO1xuICAgIHB1YmxpYyByZWFkb25seSBjcmVhdGVJdGVtTGFtYmRhOiBsYW1iZGEuRnVuY3Rpb247XG4gICAgcHVibGljIHJlYWRvbmx5IGdldEl0ZW1MYW1iZGE6IGxhbWJkYS5GdW5jdGlvbjtcbiAgICBwdWJsaWMgcm9sZXM6IEl0ZW1MYW1iZGFSb2xlcztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJdGVtTGFtYmRhc1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgdGhpcy5yb2xlcyA9IG5ldyBJdGVtTGFtYmRhUm9sZXMoc2NvcGUsICdJdGVtTGFtYmRhUm9sZXMnLCB7XG4gICAgICAgICAgICBpdGVtc1RhYmxlOiBwcm9wcy5pdGVtc1RhYmxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGlua1Rva2VuTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnTGlua1Rva2VuTGFtYmRhJywge1xuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuSkFWQV84X0NPUlJFVFRPLFxuICAgICAgICAgICAgaGFuZGxlcjogXCJsYW1iZGEuaGFuZGxlcnMuQ3JlYXRlTGlua1Rva2VuSGFuZGxlclwiLFxuXG4gICAgICAgICAgICAvLyBDb2RlIHN1cHBvcnRzIGxvY2FsIGJ1aWxkIHN0ZXBzLCBTMyBidWNrZXRzLCBhbmQgaW5saW5pbmcuXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ0phdmFQbGFpZC0xLjAuemlwJykpLFxuICAgICAgICAgICAgbWVtb3J5U2l6ZTogNTEyLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlcy5jcmVhdGVMaW5rVG9rZW5MYW1iZGFSb2xlXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jcmVhdGVJdGVtTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnQ3JlYXRlSXRlbUxhbWJkYScsIHtcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLkpBVkFfOF9DT1JSRVRUTyxcbiAgICAgICAgICAgIGhhbmRsZXI6IFwibGFtYmRhLmhhbmRsZXJzLkNyZWF0ZUl0ZW1IYW5kbGVyXCIsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ0phdmFQbGFpZC0xLjAuemlwJykpLFxuICAgICAgICAgICAgbWVtb3J5U2l6ZTogNTEyLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlcy5jcmVhdGVJdGVtTGFtYmRhUm9sZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmdldEl0ZW1MYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdHZXRJdGVtTGFtYmRhJywge1xuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuSkFWQV84X0NPUlJFVFRPLFxuICAgICAgICAgICAgaGFuZGxlcjogXCJsYW1iZGEuaGFuZGxlcnMuR2V0SXRlbXNIYW5kbGVyXCIsXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ0phdmFQbGFpZC0xLjAuemlwJykpLFxuICAgICAgICAgICAgbWVtb3J5U2l6ZTogNTEyLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlcy5nZXRJdGVtTGFtYmRhUm9sZVxuICAgICAgICB9KTtcbiAgICB9XG59Il19