"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionLambdas = exports.TransactionLambdasProps = void 0;
const lambda = require("@aws-cdk/aws-lambda");
const core_1 = require("@aws-cdk/core");
const path = require("path");
const lambdaroles_1 = require("./lambdaroles");
class TransactionLambdasProps {
}
exports.TransactionLambdasProps = TransactionLambdasProps;
class TransactionLambdas extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.roles = new lambdaroles_1.TransactionLambdasRoles(this, 'TxLambdaRoles', {
            transactionsTable: props.transactionsTable,
            itemsTable: props.itemsTable
        });
        this.loadTransactionsLambda = new lambda.Function(this, 'LoadTransactionsLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.LoadTransactionsHandler",
            // Code supports local build steps, S3 buckets, and inlining.
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            role: this.roles.loadTransactionsLambdaRole,
            timeout: core_1.Duration.seconds(300),
        });
        this.receiveTransactionsLambda = new lambda.Function(this, 'ReceiveTransactionsLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.ReceiveTransactionsHandler",
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            role: this.roles.receiveTransactionsLambdaRole,
            timeout: core_1.Duration.seconds(300)
        });
        this.newTransactionLambda = new lambda.Function(this, 'NewTransactionLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.NewTransactionHandler",
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            role: this.roles.newTransactionLambdaRole,
            timeout: core_1.Duration.seconds(300)
        });
        this.getTransactionsLambda = new lambda.Function(this, 'GetTransactionsLambda', {
            runtime: lambda.Runtime.JAVA_8_CORRETTO,
            handler: "lambda.handlers.GetTransactionsHandler",
            code: lambda.Code.fromAsset(path.join(__dirname, 'JavaPlaid-1.0.zip')),
            memorySize: 512,
            role: this.roles.getTransactionsLambdaRole,
            timeout: core_1.Duration.seconds(300)
        });
    }
}
exports.TransactionLambdas = TransactionLambdas;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNhY3Rpb25MYW1iZGFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVHJhbnNhY3Rpb25MYW1iZGFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5Qyx3Q0FBa0Q7QUFDbEQsNkJBQTZCO0FBQzdCLCtDQUFzRDtBQUd0RCxNQUFhLHVCQUF1QjtDQUduQztBQUhELDBEQUdDO0FBRUQsTUFBYSxrQkFBbUIsU0FBUSxnQkFBUztJQVE3QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHFDQUF1QixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDNUQsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUU7WUFDOUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZTtZQUN2QyxPQUFPLEVBQUUseUNBQXlDO1lBRWxELDZEQUE2RDtZQUM3RCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUN0RSxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLDBCQUEwQjtZQUMzQyxPQUFPLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7U0FDakMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUU7WUFDcEYsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZTtZQUN2QyxPQUFPLEVBQUUsNENBQTRDO1lBQ3JELElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3RFLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCO1lBQzlDLE9BQU8sRUFBRSxlQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztTQUNqQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRTtZQUMxRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlO1lBQ3ZDLE9BQU8sRUFBRSx1Q0FBdUM7WUFDaEQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDdEUsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyx3QkFBd0I7WUFDekMsT0FBTyxFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1NBQ2pDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO1lBQzVFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWU7WUFDdkMsT0FBTyxFQUFFLHdDQUF3QztZQUNqRCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUN0RSxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLHlCQUF5QjtZQUMxQyxPQUFPLEVBQUUsZUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7U0FDakMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBdERELGdEQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHtDb25zdHJ1Y3QsIER1cmF0aW9ufSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHtUcmFuc2FjdGlvbkxhbWJkYXNSb2xlc30gZnJvbSBcIi4vbGFtYmRhcm9sZXNcIjtcbmltcG9ydCB7VGFibGV9IGZyb20gXCJAYXdzLWNkay9hd3MtZHluYW1vZGJcIjtcblxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uTGFtYmRhc1Byb3BzIHtcbiAgICBpdGVtc1RhYmxlOiBUYWJsZTtcbiAgICB0cmFuc2FjdGlvbnNUYWJsZTogVGFibGU7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbkxhbWJkYXMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIHB1YmxpYyByZWFkb25seSBsb2FkVHJhbnNhY3Rpb25zTGFtYmRhOiBsYW1iZGEuRnVuY3Rpb247XG4gICAgcHVibGljIHJlYWRvbmx5IHJlY2VpdmVUcmFuc2FjdGlvbnNMYW1iZGE6IGxhbWJkYS5GdW5jdGlvbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmV3VHJhbnNhY3Rpb25MYW1iZGE6IGxhbWJkYS5GdW5jdGlvbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2V0VHJhbnNhY3Rpb25zTGFtYmRhOiBsYW1iZGEuRnVuY3Rpb247XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvbGVzOiBUcmFuc2FjdGlvbkxhbWJkYXNSb2xlcztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBUcmFuc2FjdGlvbkxhbWJkYXNQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIHRoaXMucm9sZXMgPSBuZXcgVHJhbnNhY3Rpb25MYW1iZGFzUm9sZXModGhpcywgJ1R4TGFtYmRhUm9sZXMnLCB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbnNUYWJsZTogcHJvcHMudHJhbnNhY3Rpb25zVGFibGUsXG4gICAgICAgICAgICBpdGVtc1RhYmxlOiBwcm9wcy5pdGVtc1RhYmxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubG9hZFRyYW5zYWN0aW9uc0xhbWJkYSA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ0xvYWRUcmFuc2FjdGlvbnNMYW1iZGEnLCB7XG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5KQVZBXzhfQ09SUkVUVE8sXG4gICAgICAgICAgICBoYW5kbGVyOiBcImxhbWJkYS5oYW5kbGVycy5Mb2FkVHJhbnNhY3Rpb25zSGFuZGxlclwiLFxuXG4gICAgICAgICAgICAvLyBDb2RlIHN1cHBvcnRzIGxvY2FsIGJ1aWxkIHN0ZXBzLCBTMyBidWNrZXRzLCBhbmQgaW5saW5pbmcuXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ0phdmFQbGFpZC0xLjAuemlwJykpLFxuICAgICAgICAgICAgbWVtb3J5U2l6ZTogNTEyLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlcy5sb2FkVHJhbnNhY3Rpb25zTGFtYmRhUm9sZSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoMzAwKSxcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnJlY2VpdmVUcmFuc2FjdGlvbnNMYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdSZWNlaXZlVHJhbnNhY3Rpb25zTGFtYmRhJywge1xuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuSkFWQV84X0NPUlJFVFRPLFxuICAgICAgICAgICAgaGFuZGxlcjogXCJsYW1iZGEuaGFuZGxlcnMuUmVjZWl2ZVRyYW5zYWN0aW9uc0hhbmRsZXJcIixcbiAgICAgICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnSmF2YVBsYWlkLTEuMC56aXAnKSksXG4gICAgICAgICAgICBtZW1vcnlTaXplOiA1MTIsXG4gICAgICAgICAgICByb2xlOiB0aGlzLnJvbGVzLnJlY2VpdmVUcmFuc2FjdGlvbnNMYW1iZGFSb2xlLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmV3VHJhbnNhY3Rpb25MYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdOZXdUcmFuc2FjdGlvbkxhbWJkYScsIHtcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLkpBVkFfOF9DT1JSRVRUTyxcbiAgICAgICAgICAgIGhhbmRsZXI6IFwibGFtYmRhLmhhbmRsZXJzLk5ld1RyYW5zYWN0aW9uSGFuZGxlclwiLFxuICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICdKYXZhUGxhaWQtMS4wLnppcCcpKSxcbiAgICAgICAgICAgIG1lbW9yeVNpemU6IDUxMixcbiAgICAgICAgICAgIHJvbGU6IHRoaXMucm9sZXMubmV3VHJhbnNhY3Rpb25MYW1iZGFSb2xlLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygzMDApXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2V0VHJhbnNhY3Rpb25zTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnR2V0VHJhbnNhY3Rpb25zTGFtYmRhJywge1xuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuSkFWQV84X0NPUlJFVFRPLFxuICAgICAgICAgICAgaGFuZGxlcjogXCJsYW1iZGEuaGFuZGxlcnMuR2V0VHJhbnNhY3Rpb25zSGFuZGxlclwiLFxuICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICdKYXZhUGxhaWQtMS4wLnppcCcpKSxcbiAgICAgICAgICAgIG1lbW9yeVNpemU6IDUxMixcbiAgICAgICAgICAgIHJvbGU6IHRoaXMucm9sZXMuZ2V0VHJhbnNhY3Rpb25zTGFtYmRhUm9sZSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoMzAwKVxuICAgICAgICB9KTtcbiAgICB9XG59Il19