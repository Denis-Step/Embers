"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainStack = void 0;
const core_1 = require("@aws-cdk/core");
const tables_1 = require("../tables/tables");
const ItemLambdas_1 = require("../lambdas/ItemLambdas");
const TransactionLambdas_1 = require("../lambdas/TransactionLambdas");
const messageLambdas_1 = require("../lambdas/messageLambdas");
const pullTransactionsMachine_1 = require("../statemachines/pullTransactionsMachine");
const JpApi_1 = require("../JpApi");
// Main logic and wiring goes in here.
class MainStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create Tables
        this.tables = new tables_1.JPTables(this, 'JpTables');
        // Create Lambdas that will be provided to the API.
        this.itemLambdas = new ItemLambdas_1.ItemLambdas(this, 'PlaidItem Lambdas', {
            itemsTable: this.tables.itemsTable
        });
        this.transactionLambdas = new TransactionLambdas_1.TransactionLambdas(this, 'Transaction Lambdas', {
            itemsTable: this.tables.itemsTable,
            transactionsTable: this.tables.transactionsTable
        });
        this.messageLambdas = new messageLambdas_1.MessageLambdas(this, 'MessageLambdas');
        this.pullTxStateMachine = new pullTransactionsMachine_1.PullTransactionsMachine(this, 'PullTxStateMachine', {
            loadTransactionsLambda: this.transactionLambdas.loadTransactionsLambda,
            receiveTransactionsLambda: this.transactionLambdas.receiveTransactionsLambda
        });
        this.apiStack = new JpApi_1.JpApi(this, 'JpApi', {
            getTransactionsLambda: this.transactionLambdas.getTransactionsLambda,
            linkLambda: this.itemLambdas.createLinkTokenLambda,
            itemLambda: this.itemLambdas.createItemLambda,
            pullTransactionsMachine: this.pullTxStateMachine.stateMachine
        });
    }
}
exports.MainStack = MainStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpblN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpblN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUEyRDtBQUMzRCw2Q0FBMEM7QUFDMUMsd0RBQW1EO0FBQ25ELHNFQUFpRTtBQUNqRSw4REFBeUQ7QUFDekQsc0ZBQWlGO0FBQ2pGLG9DQUErQjtBQUUvQixzQ0FBc0M7QUFDdEMsTUFBYSxTQUFVLFNBQVEsWUFBSztJQVNoQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQ3hELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFN0MsbURBQW1EO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSx5QkFBVyxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUMxRCxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVO1NBQ3JDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtZQUMxRSxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVO1lBQ2xDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCO1NBQ25ELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRWpFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLGlEQUF1QixDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRTtZQUM5RSxzQkFBc0IsRUFBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCO1lBQ3JFLHlCQUF5QixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUI7U0FDL0UsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFDO1lBQ3BDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxxQkFBcUI7WUFDcEUsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCO1lBQ2xELFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQjtZQUM3Qyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWTtTQUNoRSxDQUFDLENBQUE7SUFDTixDQUFDO0NBQ0o7QUF0Q0QsOEJBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25zdHJ1Y3QsIFN0YWNrLCBTdGFja1Byb3BzfSBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0IHtKUFRhYmxlc30gZnJvbSBcIi4uL3RhYmxlcy90YWJsZXNcIjtcbmltcG9ydCB7SXRlbUxhbWJkYXN9IGZyb20gXCIuLi9sYW1iZGFzL0l0ZW1MYW1iZGFzXCI7XG5pbXBvcnQge1RyYW5zYWN0aW9uTGFtYmRhc30gZnJvbSBcIi4uL2xhbWJkYXMvVHJhbnNhY3Rpb25MYW1iZGFzXCI7XG5pbXBvcnQge01lc3NhZ2VMYW1iZGFzfSBmcm9tIFwiLi4vbGFtYmRhcy9tZXNzYWdlTGFtYmRhc1wiO1xuaW1wb3J0IHtQdWxsVHJhbnNhY3Rpb25zTWFjaGluZX0gZnJvbSBcIi4uL3N0YXRlbWFjaGluZXMvcHVsbFRyYW5zYWN0aW9uc01hY2hpbmVcIjtcbmltcG9ydCB7SnBBcGl9IGZyb20gXCIuLi9KcEFwaVwiO1xuXG4vLyBNYWluIGxvZ2ljIGFuZCB3aXJpbmcgZ29lcyBpbiBoZXJlLlxuZXhwb3J0IGNsYXNzIE1haW5TdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGFibGVzOiBKUFRhYmxlcztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW1MYW1iZGFzOiBJdGVtTGFtYmRhcztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYW5zYWN0aW9uTGFtYmRhczogVHJhbnNhY3Rpb25MYW1iZGFzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWVzc2FnZUxhbWJkYXM6IE1lc3NhZ2VMYW1iZGFzO1xuICAgIHB1YmxpYyByZWFkb25seSBwdWxsVHhTdGF0ZU1hY2hpbmU6IFB1bGxUcmFuc2FjdGlvbnNNYWNoaW5lO1xuICAgIHB1YmxpYyByZWFkb25seSBhcGlTdGFjazogSnBBcGk7XG5cblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgLy8gQ3JlYXRlIFRhYmxlc1xuICAgICAgICB0aGlzLnRhYmxlcyA9IG5ldyBKUFRhYmxlcyh0aGlzLCAnSnBUYWJsZXMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgTGFtYmRhcyB0aGF0IHdpbGwgYmUgcHJvdmlkZWQgdG8gdGhlIEFQSS5cbiAgICAgICAgdGhpcy5pdGVtTGFtYmRhcyA9IG5ldyBJdGVtTGFtYmRhcyh0aGlzLCAnUGxhaWRJdGVtIExhbWJkYXMnLCB7XG4gICAgICAgICAgICBpdGVtc1RhYmxlOiB0aGlzLnRhYmxlcy5pdGVtc1RhYmxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25MYW1iZGFzID0gbmV3IFRyYW5zYWN0aW9uTGFtYmRhcyh0aGlzLCAnVHJhbnNhY3Rpb24gTGFtYmRhcycsIHtcbiAgICAgICAgICAgIGl0ZW1zVGFibGU6IHRoaXMudGFibGVzLml0ZW1zVGFibGUsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbnNUYWJsZTogdGhpcy50YWJsZXMudHJhbnNhY3Rpb25zVGFibGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlTGFtYmRhcyA9IG5ldyBNZXNzYWdlTGFtYmRhcyh0aGlzLCAnTWVzc2FnZUxhbWJkYXMnKTtcblxuICAgICAgICB0aGlzLnB1bGxUeFN0YXRlTWFjaGluZSA9IG5ldyBQdWxsVHJhbnNhY3Rpb25zTWFjaGluZSh0aGlzLCAnUHVsbFR4U3RhdGVNYWNoaW5lJywge1xuICAgICAgICAgICAgbG9hZFRyYW5zYWN0aW9uc0xhbWJkYTp0aGlzLnRyYW5zYWN0aW9uTGFtYmRhcy5sb2FkVHJhbnNhY3Rpb25zTGFtYmRhLFxuICAgICAgICAgICAgcmVjZWl2ZVRyYW5zYWN0aW9uc0xhbWJkYTogdGhpcy50cmFuc2FjdGlvbkxhbWJkYXMucmVjZWl2ZVRyYW5zYWN0aW9uc0xhbWJkYVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuYXBpU3RhY2sgPSBuZXcgSnBBcGkodGhpcywgJ0pwQXBpJyx7XG4gICAgICAgICAgICBnZXRUcmFuc2FjdGlvbnNMYW1iZGE6IHRoaXMudHJhbnNhY3Rpb25MYW1iZGFzLmdldFRyYW5zYWN0aW9uc0xhbWJkYSxcbiAgICAgICAgICAgIGxpbmtMYW1iZGE6IHRoaXMuaXRlbUxhbWJkYXMuY3JlYXRlTGlua1Rva2VuTGFtYmRhLFxuICAgICAgICAgICAgaXRlbUxhbWJkYTogdGhpcy5pdGVtTGFtYmRhcy5jcmVhdGVJdGVtTGFtYmRhLFxuICAgICAgICAgICAgcHVsbFRyYW5zYWN0aW9uc01hY2hpbmU6IHRoaXMucHVsbFR4U3RhdGVNYWNoaW5lLnN0YXRlTWFjaGluZVxuICAgICAgICB9KVxuICAgIH1cbn0iXX0=