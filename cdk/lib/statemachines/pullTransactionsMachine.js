"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PullTransactionsMachine = void 0;
const core_1 = require("@aws-cdk/core");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const aws_stepfunctions_1 = require("@aws-cdk/aws-stepfunctions");
class PullTransactionsMachine extends core_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.loadTransactionsLambda = props.loadTransactionsLambda;
        this.receiveTransactionsLambda = props.receiveTransactionsLambda;
        // Pull New Transactions.
        const loadTransactionsTask = new tasks.LambdaInvoke(this, 'Load Transactions', {
            lambdaFunction: this.loadTransactionsLambda,
            outputPath: '$.Payload'
        });
        // Process them and create events.
        const receiveTransactionsTask = new tasks.LambdaInvoke(this, 'Receive Transactions', {
            lambdaFunction: this.receiveTransactionsLambda
        });
        const definition = loadTransactionsTask
            .next(receiveTransactionsTask);
        this.stateMachine = new aws_stepfunctions_1.StateMachine(this, 'Pull Transactions State Machine', {
            definition,
            timeout: core_1.Duration.minutes(5)
        });
    }
}
exports.PullTransactionsMachine = PullTransactionsMachine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbFRyYW5zYWN0aW9uc01hY2hpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwdWxsVHJhbnNhY3Rpb25zTWFjaGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBa0Q7QUFFbEQsMERBQTBEO0FBQzFELGtFQUF3RDtBQU94RCxNQUFhLHVCQUF3QixTQUFRLGdCQUFTO0lBS2xELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBbUM7UUFDekUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixDQUFDO1FBQzNELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUMseUJBQXlCLENBQUM7UUFFakUseUJBQXlCO1FBQ3pCLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUMzRSxjQUFjLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtZQUMzQyxVQUFVLEVBQUUsV0FBVztTQUMxQixDQUFDLENBQUE7UUFFRixrQ0FBa0M7UUFDbEMsTUFBTSx1QkFBdUIsR0FBSSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ2xGLGNBQWMsRUFBRSxJQUFJLENBQUMseUJBQXlCO1NBQ2pELENBQUMsQ0FBQTtRQUVGLE1BQU0sVUFBVSxHQUFHLG9CQUFvQjthQUNsQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUVsQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZ0NBQVksQ0FBQyxJQUFJLEVBQUUsaUNBQWlDLEVBQUU7WUFDMUUsVUFBVTtZQUNWLE9BQU8sRUFBRSxlQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUMvQixDQUFDLENBQUE7SUFDTixDQUFDO0NBRUo7QUE5QkQsMERBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25zdHJ1Y3QsIER1cmF0aW9ufSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7RnVuY3Rpb259IGZyb20gXCJAYXdzLWNkay9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyB0YXNrcyBmcm9tICdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucy10YXNrcyc7XG5pbXBvcnQge1N0YXRlTWFjaGluZX0gZnJvbSBcIkBhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVsbFRyYW5zYWN0aW9uc01hY2hpbmVQcm9wcyB7XG4gICAgbG9hZFRyYW5zYWN0aW9uc0xhbWJkYTogRnVuY3Rpb247XG4gICAgcmVjZWl2ZVRyYW5zYWN0aW9uc0xhbWJkYTogRnVuY3Rpb247XG59XG5cbmV4cG9ydCBjbGFzcyBQdWxsVHJhbnNhY3Rpb25zTWFjaGluZSBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IGxvYWRUcmFuc2FjdGlvbnNMYW1iZGE6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyByZWFkb25seSByZWNlaXZlVHJhbnNhY3Rpb25zTGFtYmRhOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhdGVNYWNoaW5lOiBTdGF0ZU1hY2hpbmU7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUHVsbFRyYW5zYWN0aW9uc01hY2hpbmVQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICB0aGlzLmxvYWRUcmFuc2FjdGlvbnNMYW1iZGEgPSBwcm9wcy5sb2FkVHJhbnNhY3Rpb25zTGFtYmRhO1xuICAgICAgICB0aGlzLnJlY2VpdmVUcmFuc2FjdGlvbnNMYW1iZGEgPSBwcm9wcy5yZWNlaXZlVHJhbnNhY3Rpb25zTGFtYmRhO1xuXG4gICAgICAgIC8vIFB1bGwgTmV3IFRyYW5zYWN0aW9ucy5cbiAgICAgICAgY29uc3QgbG9hZFRyYW5zYWN0aW9uc1Rhc2sgPSBuZXcgdGFza3MuTGFtYmRhSW52b2tlKHRoaXMsICdMb2FkIFRyYW5zYWN0aW9ucycsIHtcbiAgICAgICAgICAgIGxhbWJkYUZ1bmN0aW9uOiB0aGlzLmxvYWRUcmFuc2FjdGlvbnNMYW1iZGEsXG4gICAgICAgICAgICBvdXRwdXRQYXRoOiAnJC5QYXlsb2FkJ1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFByb2Nlc3MgdGhlbSBhbmQgY3JlYXRlIGV2ZW50cy5cbiAgICAgICAgY29uc3QgcmVjZWl2ZVRyYW5zYWN0aW9uc1Rhc2sgPSAgbmV3IHRhc2tzLkxhbWJkYUludm9rZSh0aGlzLCAnUmVjZWl2ZSBUcmFuc2FjdGlvbnMnLCB7XG4gICAgICAgICAgICBsYW1iZGFGdW5jdGlvbjogdGhpcy5yZWNlaXZlVHJhbnNhY3Rpb25zTGFtYmRhXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGxvYWRUcmFuc2FjdGlvbnNUYXNrXG4gICAgICAgICAgICAubmV4dChyZWNlaXZlVHJhbnNhY3Rpb25zVGFzaylcblxuICAgICAgICB0aGlzLnN0YXRlTWFjaGluZSA9IG5ldyBTdGF0ZU1hY2hpbmUodGhpcywgJ1B1bGwgVHJhbnNhY3Rpb25zIFN0YXRlIE1hY2hpbmUnLCB7XG4gICAgICAgICAgICBkZWZpbml0aW9uLFxuICAgICAgICAgICAgdGltZW91dDogRHVyYXRpb24ubWludXRlcyg1KVxuICAgICAgICB9KVxuICAgIH1cblxufVxuXG4iXX0=